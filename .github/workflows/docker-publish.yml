name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '41 14 * * *'
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      # dependencies
      - name: goreleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          install-only: true
          version: 1.7.0

      - name: goreleaser info
        run: goreleaser -v

      - name: task
        uses: arduino/setup-task@v1

      - name: task info
        run: task --version

      - name: qemu
        if: github.event.pull_request.head.repo.fork == false
        uses: docker/setup-qemu-action@v2

      - name: buildx
        if: github.event.pull_request.head.repo.fork == false
        uses: docker/setup-buildx-action@v2

      # checkout
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # setup go
      - name: go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: go info
        run: |
          go version
          go env

      # cache
      - name: cache-go
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache-mod

      - name: cache-task
        uses: actions/cache@v3
        with:
          path: .task/**/*
          key: ${{ runner.os }}-go-task

      # vendor
      - name: vendor
        run: |
          task vendor

      # test
      - name: tests
        run: |
          task test

      # git status
      - name: git status
        run: git status

      # build
      - name: build
        if: startsWith(github.ref, 'refs/tags/') == false
        run: |
          task snapshot

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.11.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
